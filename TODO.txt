Unity goals:
- Correct cost for diagonals
- Budgeting for obstacle placement
	- Stages?
	- Different effects (e.g., speeding your own minions?)
	- Smaller radius, but more expensive, obstacles

- Better organization for players (i.e., a player class)
	- GameBoard
		- Initialized in init routine
		- Contains list of players
		- Player class:
			- Has own copy of map, other fields (score)
			- Subclass: Human Player
			- Code to change: MinionAi
				- How to link player and MinionAI - assigned to minion on creation?
			- Scoring: on deletion of minion, get player, increment score of opponent

_ Music box effects
	- Circle object with custom shader

- AI box placement
	- Genetic algorithm for deciding box placement

- More efficient pathfinding; Dijkstra's algorithm or other method that keeps around path costs: http://www.redblobgames.com/

_ traffic models
	- Proper Collision handing
	- Rerouting out of high traffic areas
	- Traffic AI ? (i.e., reactions to others)
		- If a another minion is ahead, stop until that minion reaches a suitable distance
	- How to factor bottlenecks into cost analysis?
		- Save paths; as minions travel along path, calculate observed cost by 			adding time wasted * velocity to total cost
			- Doesnâ€™t account for size of moose
			- Adapts slowly
			- Depends on static scene
		- Do the above, but add to edge costs along the path instead of maintaining separate edge data structure



Graphics Program
- Rewriting engine for: efficiency, correcting stutter
-